stacks:
======
nodejs, redis and psql


structure:
=========
using...
https://api.slack.com/messaging/webhooks
MVC, persisting messages dependent on user

for bugtracker:
@getSprintList
sprint list <SprintName, adminName, createdAt, updatedAt, status
	buttons(all: [open])>

@createSprint, getSprintList, getOneSprint
sprint card <title, description, involvedWorkers, createdAt, updatedAt, status, ticketList<>, 
	buttons(assigned: [nothing], admin: [editSprint<>, delete<Prompt Card>], else: [request involvement<Request Card>])>

	ticketList <name, assignedto, createdAt, updatedAt, creator, status, 
		buttons(allButAssigned: [review<Ticket Card>], creator: [editTicket<>, delete<Prompt Card>], assigned: [update<Update Card>])>
	editSprint <Title, Involved, buttons([finish])>
	editTicket <Title, Assigned, buttons([finish])>

Request Card <Role, Reason, buttons([submit])>
Prompt Card <Delete?, buttons([Yes, No])>
Ticket Card <name, assignedto, createdAt, updatedAt, creator, status, comments>
Update Card	<status, comment, buttons(submit)>


features:
========
bugtracker - [projectid, projectname, projectdescription, projectadmin],  #CRUD
			 [workername, workeremail, workerrole],
			 [tickettitle, ticketcreator, ticketworker, ticketstatus, ticketcreated] 
scheduler (personal||group) - [timedue(personal), timeduename, timeduedescription],  #CRUD
							  [futureinvite(plural), futureinvitename, futureinvitedescription]
message finder - payloadid, saverid  #CRD

for bugtracker, on log in or while logged in, ticket updates alert user.
tickets can be reassigned or deleted by the creator, but updated by whos assigned.
if ticket is altered in any way, the creator, project admin and worker are alerted on action and status.

for scheduler, by default is singular service, but if external personel are included, it will send invites to receive reminders on confirmation, if email is not provided by slack payload, prompt field to aquire it.

for message finder, webhook a payload search per key typed causing a real time listing of all possible searches on the gui, and each of them having an option to save the message id to db with your user id, as archive. 
archive by default is an empty container to be opened anywhere, only to be popluted with saved messages.
each archived item has a time stamp and the author with an option to remove it from your archive container.

.